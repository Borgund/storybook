// core/vitest.config.ts
import { defineConfig as defineConfig2, mergeConfig } from "file:///Users/me/Projects/Storybook/mono/storybook/code/node_modules/vitest/dist/config.js";

// vitest.workspace.ts
import { resolve } from "node:path";
import { defineConfig, defineWorkspace } from "file:///Users/me/Projects/Storybook/mono/storybook/code/node_modules/vitest/dist/config.js";
var __vite_injected_original_dirname = "/Users/me/Projects/Storybook/mono/storybook/code";
var vitest_workspace_default = defineWorkspace([
  ".storybook/vitest.config.ts",
  "addons/*/vitest.config.ts",
  "frameworks/*/vitest.config.ts",
  "lib/*/vitest.config.ts",
  "core/vitest.config.ts",
  "deprecated/*/vitest.config.ts",
  "builders/*/vitest.config.ts",
  "presets/*/vitest.config.ts",
  "renderers/*/vitest.config.ts"
]);
var threadCount = process.env.CI ? 7 : void 0;
var vitestCommonConfig = defineConfig({
  test: {
    pool: "threads",
    poolOptions: {
      threads: {
        minThreads: threadCount,
        maxThreads: threadCount
      }
    },
    passWithNoTests: true,
    clearMocks: true,
    setupFiles: [resolve(__vite_injected_original_dirname, "./vitest-setup.ts")],
    globals: true,
    testTimeout: 1e4,
    environment: "node"
  }
});

// core/vitest.config.ts
var vitest_config_default = mergeConfig(vitestCommonConfig, defineConfig2({}));
export {
  vitest_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiY29yZS92aXRlc3QuY29uZmlnLnRzIiwgInZpdGVzdC53b3Jrc3BhY2UudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvbWUvUHJvamVjdHMvU3Rvcnlib29rL21vbm8vc3Rvcnlib29rL2NvZGUvY29yZVwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL21lL1Byb2plY3RzL1N0b3J5Ym9vay9tb25vL3N0b3J5Ym9vay9jb2RlL2NvcmUvdml0ZXN0LmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvbWUvUHJvamVjdHMvU3Rvcnlib29rL21vbm8vc3Rvcnlib29rL2NvZGUvY29yZS92aXRlc3QuY29uZmlnLnRzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnLCBtZXJnZUNvbmZpZyB9IGZyb20gJ3ZpdGVzdC9jb25maWcnO1xuXG5pbXBvcnQgeyB2aXRlc3RDb21tb25Db25maWcgfSBmcm9tICcuLi92aXRlc3Qud29ya3NwYWNlJztcblxuZXhwb3J0IGRlZmF1bHQgbWVyZ2VDb25maWcodml0ZXN0Q29tbW9uQ29uZmlnLCBkZWZpbmVDb25maWcoe30pKTtcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL21lL1Byb2plY3RzL1N0b3J5Ym9vay9tb25vL3N0b3J5Ym9vay9jb2RlXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvbWUvUHJvamVjdHMvU3Rvcnlib29rL21vbm8vc3Rvcnlib29rL2NvZGUvdml0ZXN0LndvcmtzcGFjZS50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvbWUvUHJvamVjdHMvU3Rvcnlib29rL21vbm8vc3Rvcnlib29rL2NvZGUvdml0ZXN0LndvcmtzcGFjZS50c1wiO2ltcG9ydCB7IHJlc29sdmUgfSBmcm9tICdub2RlOnBhdGgnO1xuXG5pbXBvcnQgeyBkZWZpbmVDb25maWcsIGRlZmluZVdvcmtzcGFjZSB9IGZyb20gJ3ZpdGVzdC9jb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVXb3Jrc3BhY2UoW1xuICAnLnN0b3J5Ym9vay92aXRlc3QuY29uZmlnLnRzJyxcbiAgJ2FkZG9ucy8qL3ZpdGVzdC5jb25maWcudHMnLFxuICAnZnJhbWV3b3Jrcy8qL3ZpdGVzdC5jb25maWcudHMnLFxuICAnbGliLyovdml0ZXN0LmNvbmZpZy50cycsXG4gICdjb3JlL3ZpdGVzdC5jb25maWcudHMnLFxuICAnZGVwcmVjYXRlZC8qL3ZpdGVzdC5jb25maWcudHMnLFxuICAnYnVpbGRlcnMvKi92aXRlc3QuY29uZmlnLnRzJyxcbiAgJ3ByZXNldHMvKi92aXRlc3QuY29uZmlnLnRzJyxcbiAgJ3JlbmRlcmVycy8qL3ZpdGVzdC5jb25maWcudHMnLFxuXSk7XG5cbi8qKlxuICogQ2lyY2xlQ0kgcmVwb3J0cyB0aGUgd3JvbmcgbnVtYmVyIG9mIHRocmVhZHMgdG8gTm9kZS5qcywgc28gd2UgbmVlZCB0byBzZXQgaXQgbWFudWFsbHkuIFVuaXRcbiAqIHRlc3RzIGFyZSBydW5uaW5nIHdpdGggdGhlIHhsYXJnZSByZXNvdXJjZSBjbGFzcywgd2hpY2ggaGFzIDggdkNQVXMuXG4gKlxuICogQHNlZSBodHRwczovL2phaGVkLmRldi8yMDIyLzExLzIwL2ZpeGluZy1ub2RlLWpzLW11bHRpLXRocmVhZGluZy1vbi1jaXJjbGVjaS9cbiAqIEBzZWUgaHR0cHM6Ly92aXRlc3QuZGV2L2NvbmZpZy8jcG9vbG9wdGlvbnMtdGhyZWFkcy1tYXh0aHJlYWRzXG4gKiBAc2VlIGh0dHBzOi8vY2lyY2xlY2kuY29tL2RvY3MvY29uZmlndXJhdGlvbi1yZWZlcmVuY2UvI3g4NlxuICogQHNlZSAuY2lyY2xlY2kvY29uZmlnLnltbCNMMjE0XG4gKi9cbmNvbnN0IHRocmVhZENvdW50ID0gcHJvY2Vzcy5lbnYuQ0kgPyA3IDogdW5kZWZpbmVkO1xuXG5leHBvcnQgY29uc3Qgdml0ZXN0Q29tbW9uQ29uZmlnID0gZGVmaW5lQ29uZmlnKHtcbiAgdGVzdDoge1xuICAgIHBvb2w6ICd0aHJlYWRzJyxcbiAgICBwb29sT3B0aW9uczoge1xuICAgICAgdGhyZWFkczoge1xuICAgICAgICBtaW5UaHJlYWRzOiB0aHJlYWRDb3VudCxcbiAgICAgICAgbWF4VGhyZWFkczogdGhyZWFkQ291bnQsXG4gICAgICB9LFxuICAgIH0sXG4gICAgcGFzc1dpdGhOb1Rlc3RzOiB0cnVlLFxuICAgIGNsZWFyTW9ja3M6IHRydWUsXG4gICAgc2V0dXBGaWxlczogW3Jlc29sdmUoX19kaXJuYW1lLCAnLi92aXRlc3Qtc2V0dXAudHMnKV0sXG4gICAgZ2xvYmFsczogdHJ1ZSxcbiAgICB0ZXN0VGltZW91dDogMTAwMDAsXG4gICAgZW52aXJvbm1lbnQ6ICdub2RlJyxcbiAgfSxcbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFxVixTQUFTLGdCQUFBQSxlQUFjLG1CQUFtQjs7O0FDQW5ELFNBQVMsZUFBZTtBQUVwVyxTQUFTLGNBQWMsdUJBQXVCO0FBRjlDLElBQU0sbUNBQW1DO0FBSXpDLElBQU8sMkJBQVEsZ0JBQWdCO0FBQUEsRUFDN0I7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNGLENBQUM7QUFXRCxJQUFNLGNBQWMsUUFBUSxJQUFJLEtBQUssSUFBSTtBQUVsQyxJQUFNLHFCQUFxQixhQUFhO0FBQUEsRUFDN0MsTUFBTTtBQUFBLElBQ0osTUFBTTtBQUFBLElBQ04sYUFBYTtBQUFBLE1BQ1gsU0FBUztBQUFBLFFBQ1AsWUFBWTtBQUFBLFFBQ1osWUFBWTtBQUFBLE1BQ2Q7QUFBQSxJQUNGO0FBQUEsSUFDQSxpQkFBaUI7QUFBQSxJQUNqQixZQUFZO0FBQUEsSUFDWixZQUFZLENBQUMsUUFBUSxrQ0FBVyxtQkFBbUIsQ0FBQztBQUFBLElBQ3BELFNBQVM7QUFBQSxJQUNULGFBQWE7QUFBQSxJQUNiLGFBQWE7QUFBQSxFQUNmO0FBQ0YsQ0FBQzs7O0FEdkNELElBQU8sd0JBQVEsWUFBWSxvQkFBb0JDLGNBQWEsQ0FBQyxDQUFDLENBQUM7IiwKICAibmFtZXMiOiBbImRlZmluZUNvbmZpZyIsICJkZWZpbmVDb25maWciXQp9Cg==
