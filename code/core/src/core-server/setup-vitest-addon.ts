import { join, relative, resolve } from 'node:path';
import chalk from 'chalk';
import { pathExists, writeFile } from 'fs-extra';
import { logger } from '@storybook/core/node-logger';
import type {
  BuilderOptions,
  CLIOptions,
  LoadOptions,
  StorybookConfig,
} from '@storybook/core/types';
import {
  JsPackageManagerFactory,
  findConfigFile,
  loadAllPresets,
  loadMainConfig,
  type JsPackageManager,
} from '@storybook/core/common';
import { dedent } from 'ts-dedent';
import { findUp } from 'find-up';

type SetupVitestAddonOptions = CLIOptions & LoadOptions & BuilderOptions;

async function writeAnnotationsFile({
  configDir,
  addonImports,
  previewAnnotations,
}: {
  configDir: string;
  addonImports: { name: string; path: string }[];
  previewAnnotations: { bare: string; relative: string }[];
}) {
  const previewPath = findConfigFile('preview', configDir);
  if (previewPath) {
    addonImports.push({ name: 'previewAnnotations', path: './preview' });
  }

  previewAnnotations.forEach((annotation, index) => {
    const annotationPath = typeof annotation === 'string' ? annotation : annotation.bare;
    addonImports.push({ name: `annotation${index}`, path: annotationPath });
  });

  const annotationsPath = join(configDir, 'annotations.ts');

  await writeFile(
    annotationsPath,
    dedent`// This file is automatically generated by Storybook. Do not modify.
    ${addonImports.map(({ name, path }) => `import * as ${name} from '${path}'`).join('\n')}
    
    export const storybookAnnotations = [
      ${addonImports.map(({ name }) => name).join(',\n')}
    ];
  `
  );

  logger.info(`=> Annotations are written to: ${chalk.yellow(annotationsPath)}`);
}

async function setupVitestPlugin({
  packageManager,
  configDir,
  renderer,
  mainConfig,
}: {
  renderer: string;
  configDir: string;
  packageManager: JsPackageManager;
  mainConfig: StorybookConfig;
}) {
  logger.info('=> Setting up the Storybook Vitest plugin');
  logger.info(`=> Installing ${chalk.yellow('@storybook/experimental-vitest-plugin')}...`);
  await packageManager.addDependencies(
    {
      installAsDevDependencies: true,
    },
    ['@storybook/experimental-vitest-plugin@0.0.1--canary.1.243a840.0']
  );

  const viteConfigPath = await findUp('vite.config.ts', { cwd: configDir });
  const vitestConfigPath = await findUp('vitest.config.ts');

  // Remove numbers so that vue3 becomes vue
  const testingLibraryPackage = `@testing-library/${renderer.replace(/\d/g, '')}`;
  const storybookPackage = `@storybook/${renderer}`;

  await writeFile(
    join(configDir, 'vitest.setup.ts'),
    dedent`import { beforeAll, beforeEach } from 'vitest'
    import { setProjectAnnotations } from '${storybookPackage}'
    import {
      render as testingLibraryRender,
      cleanup,
    } from '${testingLibraryPackage}'

    import { storybookAnnotations } from './annotations'
    
    beforeEach(cleanup)
    
    const annotations = setProjectAnnotations([
      ...storybookAnnotations,
      { testingLibraryRender },
    ])

    beforeAll(annotations.beforeAll)`
  );

  const storybookVitestConfigPath = join(configDir, 'vitest.config.ts');
  if (Array.isArray(mainConfig.staticDirs)) {
    logger.info(
      '=> Detected "publicDir" in your Storybook config. You must set it up correctly in the Vitest config file in order for your static files to be served correctly.'
    );
  }

  await writeFile(
    storybookVitestConfigPath,
    dedent`import { defineConfig, mergeConfig } from 'vitest/config'
    import { storybookTest } from '@storybook/experimental-vitest-plugin'
    import viteConfig from '${relative(configDir, viteConfigPath!)}'

    export default mergeConfig(
      viteConfig,
      defineConfig({
        plugins: [
          storybookTest({
            renderer: '${renderer}',
            storybookScript: '${packageManager.getRunStorybookCommand()}',
          }),
        ],
        test: {
          name: 'storybook',
          include: [
            '../src/**/*.{story,stories}.?(c|m)[jt]s?(x)',
          ],
          browser: {
            // enabled: true,
            name: 'chromium',
            provider: 'playwright',
            headless: true,
          },
          // TODO: this is for testing purposes, we should probably just include browser mode
          setupFiles: ['./vitest.setup.ts'],
        },
      })
    )`
  );
  logger.info(
    `=> Storybook Vitest config is created at ${chalk.yellow(storybookVitestConfigPath)}`
  );

  const vitestWorkspacePath = join(vitestConfigPath!, '..', 'vitest.workspace.ts');

  if (!(await pathExists(vitestWorkspacePath))) {
    await writeFile(
      join(vitestConfigPath!, '..', 'vitest.workspace.ts'),
      dedent`import { defineWorkspace } from 'vitest/config'
  
      export default defineWorkspace([
        '${relative(vitestWorkspacePath, vitestConfigPath!)}',
        '.storybook'
      ])
      `
    );

    logger.info(`=> Workspace config is created at ${chalk.yellow(vitestWorkspacePath)}`);
  } else {
    logger.info(
      '=> Please vitest.workspace.ts already exists, please add the following line to it:'
    );
    console.log(dedent`
        import { defineWorkspace } from 'vitest/config'
  
        export default defineWorkspace([
          // ... the rest of your config
          // ðŸ‘‡ add the path to your .storybook config directory
          '${relative(vitestWorkspacePath, configDir)}'
        ])
      `);
  }
}

export async function setupVitestAddon(options: SetupVitestAddonOptions) {
  const packageManager = JsPackageManagerFactory.getPackageManager();

  const result = await packageManager.findInstallations(['vitest'], { depth: 0 });
  if (!result?.dependencies['vitest']) {
    logger.info(
      '=> There is no Vitest installed in this project, you must have it in order to use the Storybook plugin. Please set it up and run this command again.'
    );
    return;
  }

  options.configDir = resolve(options.configDir);
  const { configDir } = options;

  const mainConfig = await loadMainConfig(options);
  const { framework } = mainConfig;

  const corePresets = [];
  const frameworkName = typeof framework === 'string' ? framework : framework?.name;
  if (frameworkName) {
    corePresets.push(join(frameworkName, 'preset'));
  } else if (!options.ignorePreview) {
    logger.warn(`you have not specified a framework in your ${options.configDir}/main.js`);
  }

  logger.info('=> Extracting Storybook annotations');
  const presets = await loadAllPresets({
    corePresets: [
      // common-preset is required to get the telemetry flag
      require.resolve('@storybook/core/core-server/presets/common-preset'),
      ...corePresets,
    ],
    overridePresets: [],
    isCritical: true,
    ...options,
  });

  const core = await presets.apply('core', {});
  const renderer = core.renderer?.split('/').pop() as string;

  globalThis.FEATURES = {};
  const previewAnnotations = (await presets.apply('previewAnnotations')) as {
    bare: string;
    relative: string;
  }[];

  const addonImports: { name: string; path: string }[] = [];

  await writeAnnotationsFile({ configDir, addonImports, previewAnnotations });

  await setupVitestPlugin({ packageManager, configDir, renderer, mainConfig });

  logger.info(
    `=> The Storybook Vitest integration is setup, you can now run your 'vitest' command.`
  );
}
